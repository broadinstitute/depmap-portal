"""Init db


Revision ID: 5e25ce60e5e6
Revises: 
Create Date: 2022-08-16 19:01:05.364412

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "5e25ce60e5e6"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "dataset",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("units", sa.String(), nullable=False),
        sa.Column("feature_type", sa.String(), nullable=True),
        sa.Column("sample_type", sa.String(), nullable=True),
        sa.Column("is_transient", sa.Boolean(), nullable=False),
        sa.Column("group_id", sa.String(), nullable=False),
        sa.Column(
            "value_type",
            sa.Enum("continuous", "categorical", name="valuetype"),
            nullable=True,
        ),
        sa.Column("allowed_values", sa.JSON(), nullable=True),
        sa.CheckConstraint(
            "NOT((value_type = 'categorical' AND allowed_values = 'null') OR (value_type = 'continuous' AND allowed_values != 'null') OR (value_type IS NULL AND allowed_values != 'null'))"
        ),
        sa.CheckConstraint("NOT(feature_type IS NULL AND sample_type IS NULL)"),
        sa.ForeignKeyConstraint(["feature_type"], ["feature_type.feature_type"],),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"],),
        sa.ForeignKeyConstraint(["sample_type"], ["sample_type.sample_type"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "feature_type",
        sa.Column("feature_type", sa.String(), nullable=False),
        sa.Column("id_column", sa.String(), nullable=False),
        sa.Column("dataset_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["dataset_id"], ["dataset.id"],),
        sa.PrimaryKeyConstraint("feature_type"),
    )
    op.create_table(
        "group",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "sample_type",
        sa.Column("sample_type", sa.String(), nullable=False),
        sa.Column("id_column", sa.String(), nullable=False),
        sa.Column("dataset_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["dataset_id"], ["dataset.id"],),
        sa.PrimaryKeyConstraint("sample_type"),
    )
    op.create_table(
        "feature_index",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("dataset_id", sa.String(), nullable=True),
        sa.Column("feature_id", sa.String(), nullable=True),
        sa.Column("label", sa.String(), nullable=True),
        sa.Column("index", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["dataset_id"], ["dataset.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("feature_id", "dataset_id"),
    )
    op.create_index(
        "idx_feature_index_dataset_id",
        "feature_index",
        ["dataset_id", "feature_id"],
        unique=False,
    )
    op.create_table(
        "group_entry",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column(
            "access_type",
            sa.Enum("read", "write", "owner", name="accesstype"),
            nullable=False,
        ),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("exact_match", sa.Boolean(), nullable=True),
        sa.Column("group_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["group.id"],),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email", "group_id"),
    )
    op.create_table(
        "sample_index",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("dataset_id", sa.String(), nullable=True),
        sa.Column("sample_id", sa.String(), nullable=True),
        sa.Column("index", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["dataset_id"], ["dataset.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("sample_id", "dataset_id"),
    )
    op.create_index(
        "idx_sample_index_dataset_id",
        "sample_index",
        ["dataset_id", "sample_id"],
        unique=False,
    )
    op.create_table(
        "feature_catalog_node",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("dataset_id", sa.String(), nullable=True),
        sa.Column("feature_idx_id", sa.String(), nullable=True),
        sa.Column("priority", sa.Integer(), nullable=True),
        sa.Column("parent_id", sa.Integer(), nullable=True),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("is_continuous", sa.Boolean(), nullable=True),
        sa.Column("is_categorical", sa.Boolean(), nullable=True),
        sa.Column("is_binary", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(["dataset_id"], ["dataset.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["feature_idx_id"], ["feature_index.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"], ["feature_catalog_node.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_dataset_id_feature_idx_id",
        "feature_catalog_node",
        ["dataset_id", "feature_idx_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_dataset_id_feature_idx_id", table_name="feature_catalog_node")
    op.drop_table("feature_catalog_node")
    op.drop_index("idx_sample_index_dataset_id", table_name="sample_index")
    op.drop_table("sample_index")
    op.drop_table("group_entry")
    op.drop_index("idx_feature_index_dataset_id", table_name="feature_index")
    op.drop_table("feature_index")
    op.drop_table("sample_type")
    op.drop_table("group")
    op.drop_table("feature_type")
    op.drop_table("dataset")
    # ### end Alembic commands ###
