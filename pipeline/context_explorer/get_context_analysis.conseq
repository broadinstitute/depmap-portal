
rule get_context_analysis:
    inputs:
        script=fileref("./get_context_analysis.py"),
        artifacts=all {"type" ~ "subtype_tree|subtype_context_matrix|repurposing_matrix_taiga_id|repurposing_list_taiga_id|prism_oncology_reference_auc_matrix"},
#        subtype_tree_taiga_id=all {"type":"subtype_tree"},
#       context_matrix_taiga_id=all {"type":"subtype_context_matrix"},
        gene_effect_taiga_id={"type":"raw-dep-matrix", "label": 'Chronos_Combined'},
        gene_dependency_taiga_id={"type":"raw-dep-prob-matrix", "label": 'Chronos_Combined'},
#        repurposing_matrix_taiga_id=all {"type": "repurposing_matrix_taiga_id"},
#        repurposing_list_taiga_id=all {"type": "repurposing_list_taiga_id"},
#        oncref_auc_taiga_id=all {"type":"prism_oncology_reference_auc_matrix"},
        compound_summaries=all {"type" ~ "compound-summary"}
#       compound_summary_repurposing={"type": "compound-summary", "dataset": "Rep_all_single_pt"},
#       compound_summary_oncref={"type": "compound-summary", "dataset": "Prism_oncology_AUC"},
        tda_table={"type":"tda-table"},
    outputs:
        {"type": "context_analysis", "filename": { "$filename": "context_analysis.csv"} }
    run "python3" with """
        import json
    
        artifacts = {{ inputs.artifacts }}

        compound_tables = {{ inputs.compound_summaries }}
        oncref_table_path = cmpd_table if cmpd_table is not None and cmpd_table.dataset_id == 'Prism_oncology_AUC' else []
        repurposing_table_path = cmpd_table if cmpd_table is not None and cmpd_table.dataset_id == 'Rep_all_single_pt' else []
        
        # transformed will be our newly constructed dict of name -> artifact
        transformed = {
            # handle the ones that couldn't uniquely be identified by type specially
            "repurposing_table_path": [{{ inputs.compound_summary_repurposing }}],
            "oncref_table_path": [oncref_table_path],
            "gene_effect_taiga_id": [ repurposing_table_path ],
            "gene_dependency_taiga_id": [ {{ inputs.gene_dependency_taiga_id }} ],
            "tda_table": [ {{ inputs.tda_table }} ],
            "script": {{ inputs.script }}            
        }

        by_type = { artifact['type'] : artifact for artifact in artifacts }

        # now unpack those inputs into ids the script was using
        for dest_name, type_name in [
                ('subtype_tree_taiga_id','subtype_tree'), 
                ('context_matrix_taiga_id', 'subtype_context_matrix'),   
                ('repurposing_matrix_taiga_id', 'repurposing_matrix_taiga_id'), 
                ('repurposing_list_taiga_id', 'repurposing_list_taiga_id'), 
                ('oncref_auc_taiga_id', 'prism_oncology_reference_auc_matrix')]:
            artifact = by_type.get(type_name)
            transformed[dest_name] = [ artifact ] if artifact is not None else []

        with open("inputs.json", "wt") as fd:
            fd.write(json.dumps(transformed, indent=2))
    """
    run """ python {{ inputs.script.filename }} inputs.json context_analysis.csv """