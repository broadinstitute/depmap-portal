
rule get_context_analysis:
    inputs:
        script=fileref("./get_context_analysis.py"),
        artifacts=all {"type" ~ "subtype_tree|context_matrix|raw-dep-matrix|raw-dep-prob-matrix|repurposing_matrix_taiga_id|repurposing_list_taiga_id|prism_oncref_auc_matrix"},
#        subtype_tree_taiga_id=all {"type":"subtype_tree"},
#        context_matrix_taiga_id=all {"type":"context_matrix"},
#        gene_effect_taiga_id=all {"type":"raw-dep-matrix"},
#        gene_dependency_taiga_id=all {"type":"raw-dep-prob-matrix"},
#        repurposing_matrix_taiga_id=all {"type": "repurposing_matrix_taiga_id"},
#        repurposing_list_taiga_id=all {"type": "repurposing_list_taiga_id"},
#        oncref_auc_taiga_id=all {"type":"prism_oncref_auc_matrix"},
         compound_summary=all {"type": "compound-summary", "dataset" ~ "Rep_all_single_pt|Prism_oncology_AUC"},  #'[Prism_oncology_AUC, Rep_all_single_pt]'
    outputs:
        {"type": "context_analysis", "filename": { "$filename": "context_analysis.csv"} }
    run "python3" with """
        import json
    
        artifacts = {{ inputs.artifacts }}

        compound_summary_artifact = {{ inputs.compound_summary }}
        compound_summary_by_dataset = { artifact.dataset: artifact for artifact in compound_summary_artifact }
        oncref_table_artifact = compound_summary_by_dataset.get("Prism_oncology_AUC")
        repurposing_table_artifact = compound_summary_by_dataset.get("Rep_all_single_pt")

        # transformed will be our newly constructed dict of name -> artifact
        transformed = {
            # handle the ones that couldn't uniquely be identified by type specially
            "repurposing_table_path": oncref_table_artifact,
            "oncref_table_path": repurposing_table_artifact,
            "script": {{ inputs.script }}            
        }

        by_type = { artifact['type'] : artifact for artifact in artifacts }
        assert len(by_type) == len(artifacts), "Some type was duplicated?"

        # now unpack those inputs into ids the script was using
        for dest_name, type_name in [
                ('subtype_tree_taiga_id','subtype_tree'), 
                ('context_matrix_taiga_id', 'context_matrix'), 
                ('gene_effect_taiga_id', 'raw-dep-matrix'), 
                ('gene_dependency_taiga_id', 'raw-dep-prob-matrix'), 
                ('repurposing_matrix_taiga_id', 'repurposing_list_taiga_id'), 
                ('repurposing_list_taiga_id', 'repurposing_list_taiga_id'), 
                ('oncref_auc_taiga_id', 'prism_oncref_auc_matrix')]:
            artifact = by_type.get(type_name)
            transformed[dest_name] = [ artifact ] if artifact is not None else []

        with open("inputs.json", "wt") as fd:
            fd.write(json.dumps(transformed, indent=2))
    """
    run """ python {{ inputs.script.filename }} inputs.json context_analysis.csv """